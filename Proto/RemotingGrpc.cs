// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Remoting.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Proto.Remoting {
  public static partial class Service
  {
    static readonly string __ServiceName = "Remoting.Service";

    static readonly Marshaller<global::Proto.Messages.Ping> __Marshaller_Ping = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Messages.Ping.Parser.ParseFrom);
    static readonly Marshaller<global::Proto.Messages.Pong> __Marshaller_Pong = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Messages.Pong.Parser.ParseFrom);

    static readonly Method<global::Proto.Messages.Ping, global::Proto.Messages.Pong> __Method_Request = new Method<global::Proto.Messages.Ping, global::Proto.Messages.Pong>(
        MethodType.Unary,
        __ServiceName,
        "Request",
        __Marshaller_Ping,
        __Marshaller_Pong);

    static readonly Method<global::Proto.Messages.Ping, global::Proto.Messages.Pong> __Method_Stream = new Method<global::Proto.Messages.Ping, global::Proto.Messages.Pong>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "Stream",
        __Marshaller_Ping,
        __Marshaller_Pong);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.Remoting.RemotingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Service</summary>
    public abstract partial class ServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Proto.Messages.Pong> Request(global::Proto.Messages.Ping request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Stream(IAsyncStreamReader<global::Proto.Messages.Ping> requestStream, IServerStreamWriter<global::Proto.Messages.Pong> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Service</summary>
    public partial class ServiceClient : ClientBase<ServiceClient>
    {
      /// <summary>Creates a new client for Service</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Service that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Proto.Messages.Pong Request(global::Proto.Messages.Ping request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Request(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.Messages.Pong Request(global::Proto.Messages.Ping request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Request, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Proto.Messages.Pong> RequestAsync(global::Proto.Messages.Ping request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Proto.Messages.Pong> RequestAsync(global::Proto.Messages.Ping request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Request, null, options, request);
      }
      public virtual AsyncDuplexStreamingCall<global::Proto.Messages.Ping, global::Proto.Messages.Pong> Stream(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Stream(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncDuplexStreamingCall<global::Proto.Messages.Ping, global::Proto.Messages.Pong> Stream(CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Stream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(ServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Request, serviceImpl.Request)
          .AddMethod(__Method_Stream, serviceImpl.Stream).Build();
    }

  }
}
#endregion
